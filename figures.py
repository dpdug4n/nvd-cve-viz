import json
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import pandas as pd


def generate_figs():
    #CVSS Score Percentages
    with open('cvss_score.json', 'r') as f:
        data = json.load(f)
    year = []
    sev = []
    for k,v in data.items():
        year.append(k.split('-')[1])
        sev.append(v)

    df = pd.DataFrame({'Year':year, 'Severity':sev})
    df['Severity'] = df['Severity'].round()

    #linechart
    sev_by_year = df.groupby('Year')['Severity'].value_counts()
    sev_by_year = sev_by_year.groupby(level=0).apply(lambda x: round(
        100 * x / float(x.sum()),1)).to_frame('Percentage').reset_index() \
        .sort_values(by=['Year'], ascending=True)
    mline_sev_by_year = px.line(sev_by_year, x='Year', y='Percentage', color='Severity', hover_name='Severity', 
        color_discrete_sequence=px.colors.sequential.Turbo).update_layout(showlegend=False)

    #pie charts
    sev_percentage = df['Severity'].value_counts(normalize=True).to_frame('Percentage').reset_index().rename(columns={'index': 'Severity'})
    round(sev_percentage['Percentage']*100,2)
    pie_sev_percentage_total = px.pie(sev_percentage, 
        values = 'Percentage', names ='Severity',color_discrete_sequence=px.colors.sequential.Cividis).update_layout(showlegend=False)
    sev_percentage_by_year_frames=[year for _, year in sev_by_year.groupby('Year')]
    pie_names = [frame['Year'].iloc[0] for frame in sev_percentage_by_year_frames]
    pie_figs = [px.pie(frame, 
        values = 'Percentage', names ='Severity', color_discrete_sequence=px.colors.sequential.Cividis)\
        .update_layout(showlegend=False) for frame in sev_percentage_by_year_frames]
    pies_sev_percentage=dict(zip(pie_names,pie_figs))

    #Vector Metrics
    with open('cve_vector_metrics.json', 'r') as f:
        data = json.load(f)
    df = pd.DataFrame({'CVE ID':data.keys()})
    df = df.join(pd.DataFrame([json.loads(row.replace("'",'"')) for row in data.values()]))

    metric_percentages = [df[column].value_counts(normalize=True).to_frame() for column in df.columns[1:]]
    hover_data = [{'N':'Network','L':'Local','A':'Adjacent Network'},{'L':'Low','M':'Medium','H':'High'},
        {'N':'None','S':'Single','M':'Multiple'},{'P':'Partial','N':'None','C':'Complete'},
        {'P':'Partial','N':'None','C':'Complete'},{'P':'Partial','N':'None','C':'Complete'}]

    vector_metrics_subplots = make_subplots(
        cols = 3,rows = 2,
        subplot_titles = ('Access Vector (AV) ','Access Complexity (AC)','Authentication (Au)',
            'Confidentiality Impact (C)','Integrity Impact (I)','Availability Impact (A)'))
    plot_position = [[1,1],[2,1],[3,1],[1,2],[2,2],[3,2]]
    for frame in range(len(metric_percentages)):
        vector_metrics_subplots.add_trace(
            go.Bar(
                x=metric_percentages[frame].index.values,
                y=metric_percentages[frame].iloc[:,0].tolist(),
                hovertemplate = ' %{text} : %{y:%2f}<extra></extra>',
                text = [hover_data[frame][x] for x in metric_percentages[frame].index.values],
                showlegend=False,
            ),
            col = plot_position[frame][0],row = plot_position[frame][1])
    vector_metrics_subplots.update_layout(yaxis_visible=False, yaxis_showticklabels=False)
    vector_metrics_table = df

    #Reporting Trends
    with open('cve_publishedDate.json', 'r') as f:
        data = json.load(f)

    df = pd.DataFrame.from_dict(data, orient='index', columns=['Published Date'])
    df['Published Date']=pd.to_datetime(df['Published Date'])
    df['Year'] = df['Published Date'].dt.year
    df['Month'] = df['Published Date'].dt.month
    df['Day'] = df['Published Date'].dt.day

    reporting_insights={
    'total_month_mode':pd.to_datetime(df['Month'].mode(), format='%m').dt.month_name(),
    'total_month_anti_mode':pd.to_datetime(df['Month'].value_counts().index[-1], format='%m').month_name(),
    'publish_date_mode':df['Published Date'].mode(),
    }

    all_time_df=df.groupby(['Year']).size().reset_index(name='CVEs Reported')
    all_timeline = px.line(all_time_df, x='Year',y='CVEs Reported')
    
    all_years_df=df.groupby(['Year','Month']).size().reset_index(name='CVEs Reported')
    timeline_by_year_frames=[year.sort_values(by='Month') for _, year in all_years_df.groupby('Year')]
    for frame in timeline_by_year_frames:
        frame['Month'] = pd.to_datetime(frame['Month'], format='%m').dt.month_name()
    timeline_names = [frame['Year'].iloc[0] for frame in timeline_by_year_frames]
    timeline_figs = [px.line(frame, x='Month',y='CVEs Reported',  title=str(frame['Year'].iloc[0])) for frame in timeline_by_year_frames]
    timeline_figs=dict(zip(timeline_names,timeline_figs))

    #create dictionary of figs to return
    figs= {'mline_sev_by_year':mline_sev_by_year,
        'pie_sev_percentage':{
            'Total': pie_sev_percentage_total},
        'vector_metrics_subplots':vector_metrics_subplots,
        'vector_metrics_table':vector_metrics_table,
        'reporting_timelines':{
            'All Time': all_timeline},
        'reporting_insights':reporting_insights
        }
    figs['pie_sev_percentage'].update(dict(sorted(pies_sev_percentage.items(),reverse=True)))
    figs['reporting_timelines'].update(dict(sorted(timeline_figs.items(),reverse=True)))
    return figs

    