import dash, figures
import dash_core_components as dcc
import dash_bootstrap_components as dbc
import dash_html_components as html
import dash_table as dt
from dash.dependencies import Input, Output, State
import plotly.express as px
import pandas as pd

app = dash.Dash(__name__, suppress_callback_exceptions=True, external_stylesheets = [dbc.themes.LITERA])

server = app.server

nav = dbc.NavbarSimple(
    children=[        
        dcc.Markdown('''
            Data pulled from the [National Vulnerability Database](https://nvd.nist.gov/general).
        ''')],
    brand='NVD CVE Visualization',
    sticky='top'
    )

body = dbc.Container([
    html.Br(),
    dbc.Row([
        dbc.Col(dcc.Dropdown(
            id ='selector',
            options = [
                {'label': 'CVSS Score Percentages', 'value':'cvss_contents'},
                {'label': 'Vector Metrics', 'value':'vector_metrics'},
                {'label': 'Reporting Trends', 'value':'reporting_trends' }
            ],
            value='',
            placeholder='Select a dashboard.'
    ))]),
    html.Div(id='container'),
])

figs = figures.generate_figs()

cvss_contents= html.Div([
    html.Br(),
    dbc.Row([
        dbc.Col(dcc.Graph(id='sev_by_year',figure=figs['mline_sev_by_year'])),
        dbc.Col(dcc.Graph(id='pie_sev_percentage'),width = 4),
        dbc.Col(dcc.Dropdown(
            id='cvss_pie_selector',
            options = [{'label': k, 'value':k} for k in figs['pie_sev_percentage'].keys()], 
            value='Total',
            clearable=False
        ), width = 1)
    ],no_gutters=True),
    dbc.Row(dcc.Markdown('''
    The Common Vulnerability Scoring System (CVSS) is an open framework for communicating the characteristics and severity of software vulnerabilities.
    CVSS consists of three metric groups: Base, Temporal, and Environmental. The Base metrics produce a score ranging from 0 to 10, which can then be modified by scoring the Temporal and Environmental metrics.  
    The charts above portray the annual and total percentages of the Base metric score.'''))
])

vector_metrics_data = figs['vector_metrics_table']
vector_metrics_data['CVE ID']=[f'[{id}](https://nvd.nist.gov/vuln/detail/{id})' for id in vector_metrics_data['CVE ID']]
vector_metrics = html.Div([
    html.Br(),
    dbc.Row(dcc.Graph(id='vector_metrics_subplots',figure=figs['vector_metrics_subplots'])),
    dbc.Row(dcc.Markdown('''A CVSS score may be represented as a vector string, a compressed textual representation of the values used to derive the score.  
    The charts above depict the overall percentage of each CVSS v2 Metric Value for their corresponding metric group. The datatable below allows for filtering by each Metric Value type and provides links to the CVE entries in the National Vulnerability Database.''')),
    html.Div(dt.DataTable(id='metrics_table', 
    columns = [{"name": i, "id": i,'presentation':'markdown'} for i in vector_metrics_data],
    data = vector_metrics_data.to_dict('records'),
    fixed_rows={'headers':True},
    style_table={'overflowY': 'scroll','overflowX': 'scroll'},
    filter_action='native',
    page_action='native',
    style_cell={'textAlign': 'left'},
    )),
])

reporting_trends=html.Div([
    html.Br(),
    dbc.Row([
        dbc.Col(dcc.Graph(id='reporting_timeline'),width = 10),
            dbc.Col(dcc.Dropdown(
                id='timeline_selector',
                options = [{'label': k, 'value':k} for k in figs['reporting_timelines'].keys()], 
                value='All Time',
                clearable=False
            ), width = 2)
        ],no_gutters=True),
    dbc.Row(dcc.Markdown('The graph above depicts the CVEs reported by year, and when filtered by year show CVEs reported by month.')),
])

app.layout = html.Div([nav,body])

@app.callback(
    Output('container', 'children'),
    [Input('selector', 'value')]
)
def update_dash(value):
    if value == 'cvss_contents': return cvss_contents
    elif value == 'vector_metrics': return vector_metrics
    elif value == 'reporting_trends': return reporting_trends

@app.callback(
    Output('pie_sev_percentage', 'figure'),
    [Input('cvss_pie_selector', 'value')]
)
def update_pie(value):
    return figs['pie_sev_percentage'][value]

@app.callback(
    Output('reporting_timeline', 'figure'),
    [Input('timeline_selector', 'value')]
)
def update_pie(value):
    return figs['reporting_timelines'][value]

if __name__ == '__main__':
    app.run_server()