import gzip, json, os

# fork later, merge functions & pull into one json with below format, update figures.py and memtest
# {'CVE_ID':{'cvss':'','vector_metrics':'','publishedDate':''}}
def ID_cvss_score_parse(directory):
    json_export = {}
    entries  = 0 
    total_items = 0
    for filename in os.listdir(directory):
        with gzip.open(os.path.join(directory, filename)) as file:
            file = file.read()
            json_file = file.decode('utf-8')
            json_file = json.loads(json_file) 
            for cve in json_file["CVE_Items"]:
                total_items += 1
                try:
                    key = cve['cve']['CVE_data_meta']["ID"]
                    try:
                        value = cve['impact']['baseMetricV2']['cvssV2']["baseScore"]
                    except:
                        value = cve['impact']['baseMetricV3']['cvssV3']["baseScore"]
                    entries += 1
                    json_export[key]=value
                except Exception as e:
                    continue
    print(f'{entries} added from {total_items} CVEs.')
    with open('cvss_score.json', 'w') as f:
        json.dump(json_export, f)

def ID_vector_metrics_parse(directory):
    json_export = {}
    entries  = 0 
    total_items = 0
    for filename in os.listdir(directory):
        with gzip.open(os.path.join(directory, filename)) as file:
            file = file.read()
            json_file = file.decode('utf-8')
            json_file = json.loads(json_file) 
            for cve in json_file["CVE_Items"]:
                total_items += 1
                try:
                    key = cve['cve']['CVE_data_meta']["ID"]
                    try:
                        value = cve['impact']['baseMetricV2']['cvssV2']["vectorString"]
                    except:
                        #skipping v3 vectors for this one as vast majority are v2
                        continue
                    entries += 1
                    json_export[key]= f'''{{'{value.replace('/',"','").replace(':',"':'")}'}}'''
                except Exception as e:
                    continue
    print(f'{entries} added from {total_items} CVEs.')
    with open('cve_vector_metrics.json', 'w') as f:
        json.dump(json_export, f)

def ID_publishedDate_parse(directory):
    json_export = {}
    entries  = 0 
    total_items = 0
    for filename in os.listdir(directory):
        with gzip.open(os.path.join(directory, filename)) as file:
            file = file.read()
            json_file = file.decode('utf-8')
            json_file = json.loads(json_file) 
            for cve in json_file["CVE_Items"]:
                total_items += 1
                try:
                    key = cve['cve']['CVE_data_meta']["ID"]
                    try:
                        value = cve['publishedDate'].split('T')[0]
                    except:
                        #skipping v3 vectors for this one as vast majority are v2
                        continue
                    entries += 1
                    json_export[key]=value
                except Exception as e:
                    continue
    print(f'{entries} added from {total_items} CVEs.')
    with open('cve_publishedDate.json', 'w') as f:
        json.dump(json_export, f)    

directory = input('Directory containing NVD .gzip downloads from https://nvd.nist.gov/vuln/data-feeds: \n')
ID_publishedDate_parse(directory)
ID_vector_metrics_parse(directory)
ID_cvss_score_parse(directory)
